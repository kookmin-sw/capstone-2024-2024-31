
# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make env.properties
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'develop')
        run: |
          mkdir ./backend/src/main/resources/properties # resources 폴더 생성
          cd ./backend/src/main/resources/properties # resources 폴더로 이동
          touch ./env.properties # application.yml 생성
          echo "${{ secrets.ENV }}" > ./env.properties # github actions에서 설정한 값을 env.properties 파일에 쓰기
        shell: bash

      # firbase service key 생성
      - name: make firebase-key.json
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'develop')
        run: |
          mkdir ./backend/src/main/resources/firebase
          cd ./backend/src/main/resources/firebase
          touch ./routineup-firebase-key.json 
          echo "${{ secrets.FIREBASE_KEY }}" > ./routineup-firebase-key.json
        shell: bash

      # gradle build
      - name: Build with Gradle
        run: |
          cd ./backend
          ./gradlew build -x test

      # docker build & push to production (main branch)
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          cd ./backend
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # docker build & push to develop (develop branch)
      - name: Docker build & push to dev
        if: contains(github.ref, 'develop')
        run: |
          cd ./backend
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        env:
          APP: "docker-test-prod"
          COMPOSE: "/home/ubuntu/docker-compose.yml"
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA, APP, COMPOSE
          script: |
            sudo docker ps
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            docker-compose up -d
            sudo docker image prune -f

      ## deploy to develop
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        env:
          APP: "docker-test-dev"
          COMPOSE: "/home/ubuntu/docker-compose.yml"
        with:
          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # ubuntu
          password: ${{ secrets.PASSWORD }}
          envs: APP, COMPOSE
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker-compose -f $COMPOSE down --rmi all
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/$APP:latest
            sudo docker-compose -f $COMPOSE up -d

      ## slack notification
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
